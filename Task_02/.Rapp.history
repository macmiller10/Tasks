library (swirl)
swirl ()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
library (swirl)#
#
swirl ()
Swirl()
Swirl ()
library (swirl)#
#
swirl ()
getwd()
ls()
x <- 9
ls()
dir()
?list.files.
?list.files
args()
args(list.files())
args(list.files)
old.dir
old.dir <- getwd()
dir.create(testdir)
dir.create()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
?list.files
list.files
list.files("testdir")
info()
skip()
files.exists("mytest.R")
files.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
'!5 == 7'
!5 == 7
FALSE & FALSE
"True & c(TRUE, FALSE, FALSE)"
"TRUE & c(TRUE, FALSE, FALSE)"
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
test_func1()
test_func1(x)
submit()
boring_function('My First function!')
boring_function('My first function!')
boring_function
submit()
test_func2()
?
submit(0])
submit()
info()
skip()
my_mean(c(4, 5, 10))
submit()
skip()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
skip()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paster("Programming", "is", "fun")
paste("Programming", "is", "fun!")
skip()
telegram()
skip()
mad_libs(adjective = "", place = "", noun = "")
skip()
"'I' %p% 'love' %p% 'R!'"
skip()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = car$speed, y = car$dist, xlab = "Speed")
skip()
plot(x = car$dist, y = car$speed)
skip()
plot(cars, main = "My PLot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
setwd(~'/Desktop/Evolution/Tasks/Task_02')
setwd('/Desktop/Evolution/Tasks/Task_02')
setwd("~/Desktop/Evolution/Tasks/Task_02")#
Data <- read.csv('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)#
Data <- read.csv("beren.csv")#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1 ,]#
Data[2 ,]#
Data[1:3 ,]#
Data[1:3 , 4]#
Data[1:5 , 1:3]#
Feeds <- which(Data[ ,9] == 'bottle')#
berenMilk <- Data[Feeds ,]#
head(berenMilk)#
Feeds <- which(Data[,'event'] == 'bottle')#
Feeds <- which(Data$event == 'bottle')#
head(berenMilk)#
dayID <- apply(Data, 1, function(x) paste(x[1:3] , collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3 , 'beren_new.csv', quote=F, row.names=FALSE)
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
Feeds <- which(beren3$event == "bottle")
avgmilk <- mean(beren3$value[Feeds])
avgmilk
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
avgFeed
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenAnova <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
berenAnova
boxplot( beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab = "age in days", ylab = "ounces of milk")
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab = "age in days", ylab = "ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab = "age in days", ylab = "ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
